{"ast":null,"code":"var _jsxFileName = \"/Users/Jesse/project/my-app/client/src/containers/Comment.js\";\n//comment page\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Image } from 'semantic-ui-react';\nimport { Icon } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport '../style/web.css';\nimport handleBeforeUpload from '../components/image_upload.js';\n\nclass Comment extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      imgFile: null,\n      imgSrc: \"\",\n      list: []\n    };\n    this.openForm = this.openForm.bind(this);\n    this.closeForm = this.closeForm.bind(this);\n    this.upload = this.upload.bind(this);\n  } // deal with replied image upload\n\n\n  upload() {\n    const formData = new FormData();\n    formData.append('myImage', this.state.imgFile);\n    const config = {\n      headers: {\n        'content-type': 'multipart/form-data'\n      }\n    };\n    axios.post('/reply', formData, config).then(function (response) {\n      window.alert(response.data);\n      if (response.data === \"Success\") window.location.reload();\n    }).catch(function (error) {\n      console.log(error);\n    });\n  } // file upload is triggered\n\n\n  onFileChange(e) {\n    const file = e.target.files[0];\n\n    if (this.checkImg(file)) {\n      this.setState({\n        imgFile: file\n      }, () => {\n        this.handlePreview();\n      });\n    }\n  } // preview uploaded image\n\n\n  handlePreview() {\n    const that = this;\n    const file = this.state.imgFile;\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = function (e) {\n      that.setState({\n        imgSrc: this.result\n      });\n    };\n  } // delete image in upload box\n\n\n  deleteImageFile() {\n    this.setState({\n      imgSrc: ''\n    });\n  }\n\n  openForm() {\n    document.getElementById(\"myForm\").style.display = \"block\";\n  }\n\n  closeForm() {\n    document.getElementById(\"myForm\").style.display = \"none\";\n  }\n\n  render() {\n    // preview image\n    const showImage = React.createElement(React.Fragment, null, React.createElement(\"img\", {\n      style: {\n        width: '300px',\n        height: '300px'\n      },\n      src: this.state.imgSrc,\n      className: \"preview-all\",\n      alt: \"preview\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      onClick: this.upload.bind(this),\n      class: \"btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Send\")); // no image upload\n\n    const uploadImage = React.createElement(\"div\", {\n      className: \"upload-plus-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      type: \"plus\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"ant-upload-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"upload\")); // page content\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(Image, {\n      rounded: true,\n      src: require('../img/test.jpeg'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      className: \"open-button\",\n      onClick: this.openForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Reply\"), React.createElement(\"div\", {\n      className: \"chat-popup\",\n      id: \"myForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"form-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Reply\"), React.createElement(\"label\", {\n      htmlFor: \"msg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Picture\")), React.createElement(\"input\", {\n      type: \"file\",\n      id: \"file\",\n      accept: \"image/png, image/jpg\",\n      className: \"input-file\",\n      onChange: e => {\n        this.onFileChange(e);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"file\",\n      className: \"ant-upload\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, this.state.imgSrc ? showImage : uploadImage), React.createElement(\"button\", {\n      type: \"button\",\n      class: \"btn cancel\",\n      onClick: this.closeForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Close\"))));\n  }\n\n}\n\nexport default Comment;","map":{"version":3,"sources":["/Users/Jesse/project/my-app/client/src/containers/Comment.js"],"names":["React","Component","axios","Image","Icon","handleBeforeUpload","Comment","constructor","props","state","imgFile","imgSrc","list","openForm","bind","closeForm","upload","formData","FormData","append","config","headers","post","then","response","window","alert","data","location","reload","catch","error","console","log","onFileChange","e","file","target","files","checkImg","setState","handlePreview","that","reader","FileReader","readAsDataURL","onload","result","deleteImageFile","document","getElementById","style","display","render","showImage","width","height","uploadImage","require"],"mappings":"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","sourcesContent":["//comment page\nimport React,{Component} from 'react';\nimport axios from 'axios';\nimport { Image } from 'semantic-ui-react';\nimport { Icon } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport '../style/web.css';\nimport handleBeforeUpload from '../components/image_upload.js'\n\nclass Comment extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n        imgFile: null,\n        imgSrc: \"\",\n        list: []\n      }\n         this.openForm = this.openForm.bind(this);\n         this.closeForm = this.closeForm.bind(this);\n         this.upload = this.upload.bind(this);\n    }\n\n    // deal with replied image upload\n      upload(){\n        const formData = new FormData();\n         formData.append('myImage',this.state.imgFile);\n         const config = {\n             headers: {\n                 'content-type': 'multipart/form-data'\n             }\n         };\n         axios.post('/reply',formData,config)\n           .then(function (response)  {\n             window.alert(response.data);\n             if(response.data===\"Success\")\n             window.location.reload();\n           })\n           .catch(function (error) {\n             console.log(error);\n           });\n       }\n     \n      // file upload is triggered\n      onFileChange(e) {\n        const file = e.target.files[0];\n        if (this.checkImg(file)) {\n            this.setState({ imgFile: file}, () => {\n            this.handlePreview();\n          });\n        }\n      }\n      \n     // preview uploaded image\n      handlePreview() {\n        const that = this;\n        const file = this.state.imgFile;\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = function (e) {\n          that.setState({imgSrc: this.result })\n        }\n      }\n\n      // delete image in upload box\n      deleteImageFile() {\n        this.setState({ imgSrc: '' });\n      }\n      \n\n      openForm(){\n          document.getElementById(\"myForm\").style.display = \"block\";\n      }\n\n      closeForm(){\n          document.getElementById(\"myForm\").style.display = \"none\";\n      }\n\n    render(){\n      // preview image\n        const showImage = (\n          <>\n           <img style={{width: '300px',height: '300px'}} src={this.state.imgSrc} className=\"preview-all\" alt=\"preview\"/>\n           <button type=\"submit\" onClick={this.upload.bind(this)} class=\"btn\">Send</button>\n          </>\n        );\n        \n        // no image upload\n        const uploadImage = (\n            \n             <div className=\"upload-plus-text\">\n             <Icon type=\"plus\" />\n             <div className=\"ant-upload-text\">upload</div>\n           </div>\n            );\n\n       // page content\n        return (\n            <div>\n\n              <div className=\"container\">\n                <Image   rounded src={require('../img/test.jpeg')}/>\n              </div>\n\n            <button className=\"open-button\" onClick={this.openForm}>Reply</button>\n              \n            <div className=\"chat-popup\" id=\"myForm\">\n                <form className=\"form-container\">\n                  <h1>Reply</h1>\n\n                  <label htmlFor=\"msg\"><b>Picture</b></label>\n                  <input type=\"file\" id='file' accept=\"image/png, image/jpg\"\n                     className=\"input-file\"  onChange={e => {\n                          this.onFileChange(e);\n                      }}\n                   />\n                  <label htmlFor=\"file\" className=\"ant-upload\">  \n                    {this.state.imgSrc ? showImage : uploadImage}\n                  </label>\n                  <button type=\"button\" class=\"btn cancel\" onClick={this.closeForm}>Close</button>\n                </form>\n                \n             </div>\n            \n            </div>\n    \n    \n        )\n      }\n\n  \n}\n\n\n\n  export default Comment;"]},"metadata":{},"sourceType":"module"}